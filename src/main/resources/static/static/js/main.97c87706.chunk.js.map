{"version":3,"sources":["AppNavbar.js","Home.js","ClientList.js","ClientEdit.js","App.js","reportWebVitals.js","index.js"],"names":["AppNavbar","props","state","isOpen","toggle","bind","this","setState","color","dark","expand","tag","Link","to","Component","Home","fluid","ClientList","alertSuccess","setTimeout","success","className","alertDanger","clients","isLoading","fetch","then","response","json","data","id","method","headers","res","status","updatedClients","filter","i","catch","err","role","clientList","map","client","style","whiteSpace","name","email","size","onClick","remove","width","ClientEdit","emptyItem","history","push","item","handleChange","handleSubmit","match","params","console","log","event","target","value","a","preventDefault","body","JSON","stringify","saved","title","onSubmit","for","type","onChange","autoComplete","App","HashRouter","Switch","Route","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97c87706.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Navbar, NavbarBrand} from 'reactstrap';\nimport {Link} from 'react-router-dom';\n\nexport default class AppNavbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {isOpen: false};\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return <Navbar color=\"dark\" dark expand=\"md\">\n            <NavbarBrand tag={Link} to=\"/\">Home</NavbarBrand>\n        </Navbar>;\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\nimport { Button, Container } from 'reactstrap';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n                    <Button color=\"link\"><Link to=\"/clients\">Clients</Link></Button>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\n\nclass ClientList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {clients: [],\n            success:\"\",\n            isLoading:true\n        };\n        //this.remove = this.remove.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('http://localhost:8081/api/')\n            .then(response => response.json())\n            .then(data =>{ \n                \n                setTimeout(()=>{this.setState({clients: data,isLoading:false})},1000)\n        });\n    }\n\n      remove(id) {\n        this.setState({isLoading:true})\n          fetch(`http://localhost:8081/api/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then((res) => {\n            if(res.status==200){\n                let updatedClients = [...this.state.clients].filter(i => i.id !== id);\n                setTimeout(()=>{this.setState({clients: updatedClients,success:true,isLoading:false})},1000)\n            }else{\n                this.setState({success: false});\n                setTimeout(()=>{this.setState({isLoading:false})},1000)\n\n\n            }\n        }).catch(err=>{\n            this.setState({success:false})\n        });\n    }\n\n\n    alertSuccess=()=>{\n\n        setTimeout(()=>{\n            this.setState({success:\"\"})\n        },4000)\n       return <div className=\"alert alert-success\">the operation passed successfully</div>\n    \n    }\n     alertDanger=()=>{\n    \n        setTimeout(()=>{\n            this.setState({success:\"\"})\n        },4000)\n       return <div className=\"alert alert-danger\">the operation has filled.</div>\n    \n    }\n    render() {\n        const {clients} = this.state;\n\n        if (this.state.isLoading) {\n            return <div className=\"spinner-border text-primary text-center\" role=\"status\">\n            <h4 className=\"visually-hidden\">Loading...</h4>\n          </div>\n          } \n\n        const clientList = clients.map(client => {\n            return <tr key={client.id}>\n                <td style={{whiteSpace: 'nowrap'}}>{client.name}</td>\n                <td>{client.email}</td>\n                <td>\n                    <ButtonGroup>\n                        <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/clients/\" + client.id}>Edit</Button>\n                        <Button size=\"sm\" color=\"danger\" onClick={this.remove.bind(this,client.id)}>Delete</Button>\n                    </ButtonGroup>\n                </td>\n            </tr>\n        });\n\n        return (\n            <div>\n                <AppNavbar/>\n               \n                <Container className=\"mt-5\" >\n                {this.state.success===true && \n                    this.alertSuccess()\n                    }  \n                    {this.state.success===false && \n                        this.alertDanger()\n                    } \n                    <div className=\"float-right\">\n                        <Button color=\"success\" tag={Link} to=\"/clients/new\">Add Client</Button>\n                    </div>\n                    <h3>Clients</h3>\n                    <Table className=\"mt-4\">\n                        <thead>\n                        <tr>\n                            <th width=\"30%\">Name</th>\n                            <th width=\"30%\">Email</th>\n                            <th width=\"40%\">Actions</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {clientList}\n                        </tbody>\n                    </Table>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default ClientList;\n","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\n\nclass ClientEdit extends Component {\n\n    emptyItem = {\n        name: '',\n        email: ''\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: this.emptyItem,\n            success:\"\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n     componentDidMount() {\n        if (this.props.match.params.id !== 'new') {\n           // const client = await (await fetch(`/clients/${this.props.match.params.id}`)).json();\n           // this.setState({item: client});\n\n            fetch(`http://localhost:8081/api/${this.props.match.params.id}`).then(res=>{\n            return res.json();\n        }\n        ).then(data=>{\n            this.setState({item: data})\n            console.log(data)\n        })\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let item = {...this.state.item};\n        item[name] = value;\n        this.setState({item});\n    }\n\nasync handleSubmit(event) {\n    event.preventDefault();\n    const {item} = this.state;\n     console.log(item.id)\n    \n        const saved=await fetch('http://localhost:8081/api/' + (item.id==null ? '/create' : item.id ), {\n            method: (item.id) ? 'PUT' : 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item),\n        });\n        if(saved.status==200){\n            console.log(saved.status)\n            console.log(this.state.success)\n            if(item.id==null)\n               this.setState({item:this.emptyItem})\n            this.setState({success:true})\n\n            console.log(saved.status)\n    \n        }else{\n          this.setState({success:false})\n          console.log(\"ddd\"+saved.status)\n\n        }\n\n}\n\n alertSuccess=()=>{\n\n    setTimeout(()=>{\n        this.setState({success:\"\"})\n        this.props.history.push('/clients');\n    },4000)\n   return <div className=\"alert alert-success\">the operation passed successfully</div>\n\n}\n alertDanger=()=>{\n\n    setTimeout(()=>{\n        this.setState({success:\"\"})\n    },4000)\n   return <div className=\"alert alert-danger\">the operation has filled.</div>\n\n}\n\n    render() {\n        const {item} = this.state;\n        const title = <h2>{item.id ? 'Edit Client' : 'Add Client'}</h2>;\n\n        return <div>\n            <AppNavbar/>\n            <Container>\n                {title}\n                {this.state.success===true && \n                    this.alertSuccess()\n                    }  \n                    {this.state.success===false && \n                        this.alertDanger()\n                    } \n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label for=\"name\">Name</Label>\n                        <Input type=\"text\" name=\"name\" id=\"name\" value={item.name }\n                               onChange={this.handleChange} autoComplete=\"name\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"email\">Email</Label>\n                        <Input type=\"text\" name=\"email\" id=\"email\" value={item.email }\n                               onChange={this.handleChange} autoComplete=\"email\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n                        <Button color=\"secondary\" tag={Link} to=\"/clients\">Cancel</Button>\n                    </FormGroup>\n                </Form>\n            </Container>\n        </div>\n    }\n}\n\nexport default ClientEdit;","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport ClientList from './ClientList';\nimport ClientEdit from \"./ClientEdit\";\n\nclass App extends Component {\n  render() {\n    return (\n        <HashRouter>\n          <Switch>\n            <Route path='/' exact={true} component={Home}/>\n            <Route path='/clients' exact={true} component={ClientList}/>\n            <Route path='/clients/:id' component={ClientEdit}/>\n          </Switch>\n        </HashRouter>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ClientList from './ClientList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}